apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: custom-metrics
data:
  config.yaml: |
    rules:
    - seriesQuery: '{namespace!="",__name__!=""}'
      seriesFilters: []
    # - seriesQuery: '(.*){namespace!="",service!=""}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^.*"
        as: "airflow_tasks_per_worker"
      metricsQuery: 'ceil(max(sum(airflow_task_status{<<.LabelMatchers>>,status=~"up_for_retry|up_for_reschedule|queued|running|scheduled|none"}) by (namespace, service) / ignoring (namespace, service) group_left count(container_memory_usage_bytes{container_label_run="celery"}) by (namespace, service) or up - 1) by (namespace, service))'
      # https://github.com/DirectXMan12/k8s-prometheus-adapter/pull/46#discussion_r171883260
    - seriesQuery: 'airflow_task_status{namespace!="",service!=""}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^airflow_task_status"
        as: "airflow_task_status_running"
      metricsQuery: 'max(sum(airflow_task_status{<<.LabelMatchers>>,status=~"up_for_retry|up_for_reschedule|queued|running|scheduled|none"}) by (namespace, service) or up{<<.LabelMatchers>>} - 1)'
      # Warning ! We would normally do something like sum(airflow_dag_status{status="running"}) here to get only the number of running tasks,
      # but the prometheus-adapter does not works this way as it's using the 'Element' field in the query response,
      # instead it returns a count of all the metrics matching the series pattern.
      #
      # Note on the 'or sort() trick': using only the query to get the current pending tasks count
      # when no tasks are pending makes the custom-metrics server return a 404,
      # as an hpa doesn't understand 404 responses as '0' values,
      # the 'or up' hack make it so the custom-metrics server always returns something
      # and the sort is here to make sure the up() is not threated instead of the sum of our tasks
    - seriesQuery: 'airflow_dag_status{namespace!="",service!=""}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          service: {resource: "service"}
      name:
        matches: "^airflow_dag_status"
        as: "airflow_dag_status_running"
      metricsQuery: 'airflow_dag_status{<<.LabelMatchers>>,status="running"} or airflow_dag_status'
    - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
      seriesFilters: []
      resources:
        overrides:
          namespace:
            resource: namespace
          pod_name:
            resource: pod
      name:
        matches: ^container_(.*)_seconds_total$
        as: ""
      metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)
    - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
      seriesFilters:
      - isNot: ^container_.*_seconds_total$
      resources:
        overrides:
          namespace:
            resource: namespace
          pod_name:
            resource: pod
      name:
        matches: ^container_(.*)_total$
        as: ""
      metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)
    - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
      seriesFilters:
      - isNot: ^container_.*_total$
      resources:
        overrides:
          namespace:
            resource: namespace
          pod_name:
            resource: pod
      name:
        matches: ^container_(.*)$
        as: ""
      metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}) by (<<.GroupBy>>)
    - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
      seriesFilters:
      - isNot: .*_total$
      resources:
        template: <<.Resource>>
      name:
        matches: ""
        as: ""
      metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
    - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
      seriesFilters:
      - isNot: .*_seconds_total
      resources:
        template: <<.Resource>>
      name:
        matches: ^(.*)_total$
        as: ""
      metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
    - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
      seriesFilters: []
      resources:
        template: <<.Resource>>
      name:
        matches: ^(.*)_seconds_total$
        as: ""
      metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
    resourceRules:
      cpu:
        containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[1m])) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        containerLabel: container_name
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        containerLabel: container_name
      window: 1m
    # externalRules:
    # - seriesQuery: 'http_requests_total{namespace!="",pod!=""}'
    #   resources:
    #     overrides:
    #       namespace: {resource: "namespace"}
    #       pod: {resource: "pod"}
    #       service: {resource: "service"}
    #   name:
    #     matches: "^(.*)_total"
    #     as: "${1}_per_second"      
    #   metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'
    # - seriesQuery: 'airflow_dag_status{status="running"}'
    #   resources:
    #     overrides:
    #       namespace: {resource: "namespace"}
    #       pod: {resource: "pod"}
    #       service: {resource: "service"}
    #   # name:
    #   #   as: airflow_dag_status_running
    #   metricsQuery: 'sum(<<.Series>>{<<.LabelMatchers>>})'

    # - seriesQuery: 'airflow_dag_status'
    #   metricsQuery: 'sum(<<.Series>>{status="running"})'
    #   # name:
    #     # matches: 'airflow_dag_status_running_total'
    #     # as: ""
    # resourceRules:
    #   window: 5s
